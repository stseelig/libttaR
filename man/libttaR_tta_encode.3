.\" t
.\"     Title: libttaR_tta_encode
.\"    Author: Shane Seelig
.\"      Date: 2025-04-25
.\"    Source: libttaR 2.0
.\"  Language: English
.\"
.\" ##########################################################################

.TH "LIBTTAr_TTA_ENCODE" "3" "2025\-04\-01" "libttaR 2.0" \
"LibTTAr Programmer's Manual"

.\" ##########################################################################

.SH "NAME"
libttaR_tta_encode, libttaR_tta_decode \- a reentrant TTA codec

.\" ##########################################################################

.SH "SYNOPSIS"

.nf
.B #include <libttaR.h>

.BI "enum LibTTAr_EncRetVal libttaR_tta_encode("
.RS 8
.BI "uint8_t *restrict " dest ",
.BI "const int32_t *restrict " src ",
.BI "struct LibTTAr_CodecState_Priv *restrict " priv ",
.BI "struct LibTTAr_CodecState_User *restrict " user ",
.BI "const struct LibTTAr_EncMisc *restrict " misc "
.RE
.BI ");"

.BI "enum LibTTAr_DecRetVal libttaR_tta_decode("
.RS 8
.BI "int32_t *restrict " dest ",
.BI "const uint8_t *restrict " src ",
.BI "struct LibTTAr_CodecState_Priv *restrict " priv ",
.BI "struct LibTTAr_CodecState_User *restrict " user ",
.BI "const struct LibTTAr_EncMisc *restrict " misc "
.RE
.BI ");"
.fi

.\" ##########################################################################

.SH "DESCRIPTION"

.BR libttaR_tta_encode ()
encodes a whole or partial TTA frame.

.BR libttaR_tta_decode ()
decodes a whole or partial TTA frame.

.\" -------------------------------------------------------------------------#

.SS Arguments

*\fIdest\fR
.RS 8
The destination buffer.
Needs to be padded with at least
\fBlibttaR_ttabuf_safety_margin\fR()
bytes when encoding.
.RE

*\fIsrc\fR
.RS 8
The source buffer.
Needs to be padded with at least
\fBlibttaR_ttabuf_safety_margin\fR()
bytes when decoding.
.RE

*\fIpriv\fR
.RS 8
The codec's private state.
The struct is opaque and needs to be allocated and properly aligned
(malloc() / __BIGGEST_ALIGNMENT__)
with the size from
.BR libttaR_codecstate_priv_size ().
.RE

*\fIuser\fR
.RS 8
The codec's user readable state.
Must be initialized with
.B LIBTTAr_CODECSTATE_USER_INIT
before the first call for a new frame.

.nf
\fBstruct LibTTAr_CodecState_User\fR {
    uint32_t    ncalls_codec;
    uint32_t    crc;
    size_t      ni32;
    size_t      ni32_total;
    size_t      nbytes_tta;
    size_t      nbytes_tta_total;
};
.fi

ncalls_codec:
.RS 8
The number of successful calls to the codec function.
.RE

crc:
.RS 8
The frame CRC.
.RE

ni32:
.RS 8
The number of int32_t PCM read/written for the last call.
.RE

ni32_total:
.RS 8
The total number of int32_t PCM read/written across all calls
for the current frame.
.RE

nbytes_tta:
.RS 8
The number of TTA bytes written/read for the last call.
.RE

nbytes_tta_total:
.RS 8
The total number of TTA bytes written/read across all calls
for the current frame.
.RE

.RE

*\fImisc\fR
.RS 8
Other values/properties.

.nf
\fBstruct LibTTAr_EncMisc\fR {
    size_t                      dest_len;
    size_t                      src_len;
    size_t                      ni32_target;
    size_t                      ni32_perframe;
    enum LibTTAr_SampleBytes    samplebytes;
    unsigned int                nchan;
};

\fBstruct LibTTAr_DecMisc\fR {
    size_t                      dest_len;
    size_t                      src_len;
    size_t                      ni32_target;
    size_t                      nbytes_tta_target;
    size_t                      ni32_perframe;
    size_t                      nbytes_tta_perframe;
    enum LibTTAr_SampleBytes    samplebytes;
    unsigned int                nchan;
};
.fi

dest_len:
.RS 8
The length of the destination buffer.
.RE

src_len:
.RS 8
The length of the source buffer.
.RE

ni32_target:
.RS 8
The target number of int32_t PCM from the src/dest buffer to encode/decode.
Must be evenly divisible by \fImisc\fR->nchan.
.RE

nbytes_tta_target:
.RS 8
The target number of TTA bytes from the dest/src buffer to encode/decode.
.RE

ni32_perframe:
.RS 8
The number of uncoded int32_t per TTA frame.
.RE

nbytes_tta_perframe:
.RS 8
The number of encoded bytes in the current TTA frame.
.RE

samplebytes:
.RS 8
The number of bytes per samples in the originally sized PCM.

.nf
\fBenum LibTTAr_SampleBytes\fR {
    LIBTTAr_SAMPLEBYTES_1   = 1u,
    LIBTTAr_SAMPLEBYTES_2   = 2u,
    LIBTTAr_SAMPLEBYTES_3   = 3u
};
.fi
.RE

nchan:
.RS 8
The number of audio channels in the PCM.
.RE

.\" -------------------------------------------------------------------------#

.SS Warning
*\fIpriv\fR, *\fIuser\fR, \fImisc\fR->nchan, \fImisc\fR->ni32_perframe, and
\fImisc\fR->nbytes_tta_perframe
should not be modified between consecutive calls for the same frame,
unless you know what you are doing.

.\" ##########################################################################

.SH "RETURN VALUE"

.nf
\fBenum LibTTAr_EncRetVal\fR {
    LIBTTAr_ERV_DONE            = /* =0 */,
    LIBTTAr_ERV_AGAIN           = /* >0 */,
    LIBTTAr_ERV_INVAL_RANGE     = /* <0 */,
    LIBTTAr_ERV_INVAL_TRUNC     = /* <0 */,
    LIBTTAr_ERV_INVAL_BOUNDS    = /* <0 */,
    LIBTTAr_ERV_MISCONFIG       = /* <0 */
};

\fBenum LibTTAr_DecRetVal\fR {
    LIBTTAr_DRV_DONE            = /* =0 */,
    LIBTTAr_DRV_AGAIN           = /* >0 */,
    LIBTTAr_DRV_FAIL            = /* >0 */,
    LIBTTAr_DRV_INVAL_RANGE     = /* <0 */,
    LIBTTAr_DRV_INVAL_TRUNC     = /* <0 */,
    LIBTTAr_DRV_INVAL_BOUNDS    = /* <0 */,
    LIBTTAr_DRV_MISCONFIG       = /* <0 */
};
.fi

.SH Success (>= 0)

.RS 4

\fBLIBTTAr_ERV_DONE\fR, \fBLIBTTAr_DRV_DONE\fR
.RS 8
The frame finished coding.
.RE

\fBLIBTTAr_ERV_AGAIN\fR, \fBLIBTTAr_DRV_AGAIN\fR
.RS 8
The frame did not finish coding.
.RE

\fBLIBTTAr_DRV_FAIL\fR
.RS 8
The frame finished decoding, but
(\fIuser\fR->nbytes_tta_total !\= \fImisc\fR->nbytes_tta_perframe), or
the frame did not finish decoding, but
(\fIuser\fR->nbytes_tta_total > \fImisc\fR->nbytes_tta_perframe).
This would be caused by either corrupted or malformed TTA data.

The absense of this value does not guarantee that the data was correctly
decoded, only that the "correct" number of bytes was read.
There is a check in the rice decoder to stop after reading so many bytes, but
it does not return an error, it just stops reading the current code and then
continues (for performance reasons).
It should be possible to construct an invalid TTA frame (with a good CRC) that
could get the decoder to read the "correct" number of bytes.
.RE

.RE

.SH Error (< 0)

.RS 4

\fBLIBTTAr_ERV_INVAL_RANGE\fR, \fBLIBTTAr_DRV_INVAL_RANGE\fR
.RS 8
Some \fImisc\fR value is 0 or a bad enum value.

The source code allows the compiler to consider a bad enum value
to be undefined behavior.
A cute compiler could cause funny things to happen in such a situation,
but an error will likely just be returned instead.
.RE

\fBLIBTTAr_ERV_INVAL_TRUNC\fR, \fBLIBTTAr_DRV_INVAL_TRUNC\fR
.RS 8
The last sample is truncated.
(\fImisc\fR->ni32_target % \fImisc\fR->nchan != 0)
.RE

\fBLIBTTAr_ERV_INVAL_BOUNDS\fR, \fBLIBTTAr_DRV_INVAL_BOUNDS\fR
.RS 8
Some \fImisc\fR value would cause a bounds issue.
.RE

\fBLIBTTAr_ERV_MISCONFIG\fR, \fBLIBTTAr_DRV_MISCONFIG\fR
.RS 8
The library was misconfigured when built; see \fBlibttaR_test_nchan\fR().
.RE

.RE

.\" ##########################################################################

.SH "ATTRIBUTES"

Both are MT-Safe.

.\" ##########################################################################

.SH "EXAMPLES"

.\" -------------------------------------------------------------------------#

.SS libttaR/src/cli/modes/mode_encode_loop.c
.EX
// may be older code
static void
enc_frame_encode(
        struct EncBuf *const restrict encbuf,
        /*@reldef@*/ struct LibTTAr_CodecState_Priv *const restrict priv,
        /*@out@*/ struct LibTTAr_CodecState_User *const restrict user_out,
        const enum TTASampleBytes samplebytes, const uint nchan,
        const size_t ni32_perframe
)
/*@globals      fileSystem,
                internalState
@*/
/*@modifies     fileSystem,
                internalState,
                encbuf->ttabuf_len,
                *encbuf->i32buf,
                encbuf->ttabuf,
                *encbuf->ttabuf,
                *priv,
                *user_out
@*/
{
        enum LibTTAr_EncRetVal status;
        struct LibTTAr_CodecState_User user = LIBTTAr_CODECSTATE_USER_INIT;
        struct LibTTAr_EncMisc misc;
        UNUSED union {  size_t z; } result;

        assert(encbuf->i32buf != NULL);

        // convert pcm to i32
        result.z = libttaR_pcm_read(
                encbuf->i32buf, encbuf->pcmbuf, ni32_perframe, samplebytes
        );
        assert(result.z != 0);

        // encode i32 to tta
        misc.ni32_perframe = ni32_perframe;
        misc.samplebytes   = samplebytes;
        misc.nchan         = nchan;
        goto loop_entr;
	do {
                encbuf_adjust(encbuf, TTABUF_LEN_DEFAULT, nchan);
loop_entr:
                misc.dest_len    = encbuf->ttabuf_len - user.nbytes_tta_total;
                misc.src_len     = encbuf->i32buf_len - user.ni32_total;
                misc.ni32_target = ni32_perframe - user.ni32_total;

                status = libttaR_tta_encode(
                        &encbuf->ttabuf[user.nbytes_tta_total],
                        &encbuf->i32buf[user.ni32_total],
                        priv, &user, &misc
                );
                assert((status == LIBTTAr_ERV_DONE)
                      ||
                       (status == LIBTTAr_ERV_AGAIN)
                );
        }
        while ( status == LIBTTAr_ERV_AGAIN );

        *user_out = user;
        return;
}
.EE

.\" -------------------------------------------------------------------------#

.SS libttaR/src/cli/modes/mode_decode_loop.c
.EX
// may be older code
static int
dec_frame_decode(
        struct DecBuf *const restrict decbuf,
        /*@reldef@*/ struct LibTTAr_CodecState_Priv *const restrict priv,
        /*@out@*/ struct LibTTAr_CodecState_User *const restrict user_out,
        const enum TTASampleBytes samplebytes, const uint nchan,
        size_t ni32_perframe, const size_t nbytes_tta_perframe,
        /*@out@*/ size_t *const restrict nsamples_flat_2pad
)
/*@modifies     *decbuf->i32buf,
                *decbuf->pcmbuf,
                *priv,
                *user_out,
                *nsamples_flat_2pad
@*/
{
        enum LibTTAr_DecRetVal status;
        struct LibTTAr_CodecState_User user = LIBTTAr_CODECSTATE_USER_INIT;
        struct LibTTAr_DecMisc misc;
        size_t pad_target;
        UNUSED union {  size_t z; } result;

        assert(decbuf->i32buf != NULL);

        // check for truncated sample
        pad_target     = (ni32_perframe % nchan == 0
                ? 0 : (size_t) (nchan - (ni32_perframe % nchan))
        );
        ni32_perframe += pad_target;

        // decode tta to i32
        misc.dest_len            = decbuf->i32buf_len;
        misc.src_len             = decbuf->ttabuf_len;
        misc.ni32_target         = ni32_perframe;
        misc.nbytes_tta_target   = nbytes_tta_perframe;
        misc.ni32_perframe       = ni32_perframe;
        misc.nbytes_tta_perframe = nbytes_tta_perframe;
        misc.samplebytes         = samplebytes;
        misc.nchan               = nchan;
        //
        status = libttaR_tta_decode(
                decbuf->i32buf, decbuf->ttabuf, priv, &user, &misc
        );
        // with the way the decoding is setup, _AGAIN shouldn't happen
        assert((status == LIBTTAr_DRV_DONE)
              ||
               (status == LIBTTAr_DRV_FAIL)
        );

        if UNLIKELY ( status == LIBTTAr_DRV_FAIL ){
                pad_target     += ni32_perframe - user.ni32_total;
                user.ni32_total = ni32_perframe;
        }

        // convert i32 to pcm
        result.z = libttaR_pcm_write(
                decbuf->pcmbuf, decbuf->i32buf, user.ni32_total, samplebytes
        );
        assert(result.z != 0);

        *user_out           = user;
        *nsamples_flat_2pad = pad_target;
        return (int) status;
}
.EE

.\" ##########################################################################

.SH "SEE ALSO"

.BR libttaR_pcm_read (3),
.BR libttaR_pcm_write (3),
.BR libttaR_crc32 (3),
.BR libttaR_misc (3)

.\" ##########################################################################

.SH "AUTHOR"

.B "Shane Seelig"
.RS 4
Developer
.RE

.\" EOF ######################################################################
